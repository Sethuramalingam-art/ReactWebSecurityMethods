Web security methods react:

Cross-site scripting (or XSS) allows an attacker to execute arbitrary JavaScript within the browser of a victim user.

Cross-site request forgery (or CSRF) allows an attacker to induce a victim user to perform actions that they do not intend to.

1. Use default React XSS protection with data binding

How can I prevent React XSS attacks?
Use default data binding with curly braces ({}) and React will automatically escape values to protect against XSS attacks. Note that this protection only occurs when rendering textContent and not when rendering HTML attributes.

Use JSX data binding syntax ({}) to place data in your elements.

Do this:

<div>{data}</div>
Avoid dynamic attribute values without custom validation.

Don’t do this:

<form action={data}>...


2. Watch out for dangerous URLs and URL-based script injection

URLs can contain dynamic script content via javascript: protocol URLs. 
Use validation to assure your links are http: or https: to avoid javascript: URL-based script injection. 
Achieve URL validation using a native URL parsing function then match the parsed protocol property to an allow list.

function validateURL(url) {
    const parsed = new URL(url)
    return ['https:', 'http:'].includes(parsed.protocol)
  }
  
  <a href={validateURL(url) ? url : ''}>Click here!</a>


3. Sanitize and render HTML
It is possible to insert HTML directly into rendered DOM nodes using dangerouslySetInnerHTML. 
Any content inserted this way must be sanitized beforehand. 
Use a sanitization library like dompurify on any values before placing them into the dangerouslySetInnerHTML prop.

Use dompurify when inserting HTML into the DOM.

import purify from "dompurify";
<div dangerouslySetInnerHTML={{ __html:purify.sanitize(data) }} />

4. Avoid direct DOM access

avoid this , this.myRef.current.innerHTML = attackerControlledValue;

5. Check for known vulnerabilities in dependencies
Some versions of third-party components might contain JavaScript security issues. 
Always check your dependencies with a software composition analysis (SCA) tool before adding them to a project, 
and be sure to update when a newer version becomes available.

Snyk VS Code extension
While developing a React application in VS Code you can use the Snyk extension to alert you of any known vulnerabilities in your project.
 You’ll find visibility to these alerts via squiggly line warnings directly in your package.json file, 
 the Snyk extensions panel and the VS Code problems panel. 
 This is helpful so that you don’t have to switch context out of your development environment to learn of these vulnerabilities — 
 it’s all within your scope.

 Snyk app (https://app.snyk.io)

 Snyk CLI
You can also use the free Snyk CLI to check for vulnerabilities. 
Automatically fix vulnerabilities with Snykby integrating with your source code management system to receive automated fixes:

npx snyk test


6. Avoid JSON injection attacks
It is common to send JSON data along with server-side rendered React pages. Always escape < characters with a benign value to avoid injection attacks.

Always escape HTML significant values from JSON with benign equivalent characters.

Do this:

window.__PRELOADED_STATE__ =   ${JSON.stringify(preloadedState).replace( /</g, '\\u003c')}

7. Use linter configurations
Install linter configurations and plugins that will automatically detect security issues in your code and offer remediation advice.

Use the ESLint React security config to detect security issues in our code base.

Configure a pre-commit hook that fails when security-related linter issues are detected using a library like husky.

Use Snyk to automatically update to new versions when vulnerabilities exist in the versions you are using.